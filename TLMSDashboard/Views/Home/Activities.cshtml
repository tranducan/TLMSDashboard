@model List<TLMSData.Models.ProductionRealtime>

@{
    ViewData["Title"] = "PCQRealtime Page";
    var Ouput = Newtonsoft.Json.JsonConvert.SerializeObject(Model);
    var throughput = Model.Sum(d=>d.PassedQty);
    var yield = (double)Model.Sum(d => d.PassedQty) / (double) (Model.Sum(d => d.PassedQty)+ Model.Sum(d => d.NotPassedQty));
}



<script>
    var productionRealTimes = @Html.Raw(Ouput);
    console.log(productionRealTimes);
</script>


<main class="reloadable">
    <h4 id="reload-countdown" class="text-right mb-2"></h4>
    <div class="jumbotron pcq-header">
        <h5 class="display-4">PQC production line dashboard</h5>
        <div class="btn-group pcq-head w-40" role="group" aria-label="Basic example">
            <a class="btn bg-green-2" href="#">
                <p>Yield (%)</p>
                <p>@Math.Round(yield * 100, 2)</p>
            </a>
            <a class="btn bg-blue-2" href="#">
                <p>Throughput (pcs)</p>
                <p>@throughput</p>
            </a>
        </div>
    </div>


    <div class="mb-4">
        <h2 class="text-center">PQC Realtime Chart</h2>
        <canvas id="chart-production-realtime"></canvas>
    </div>


    <script>(function ($) {
            $(document).ready(function () {
                var DATA_COUNT = productionRealTimes.length;
                var labels = productionRealTimes.map(function (data) {
                    return `At: ${data.Hour}:00 - Running product: ${data.Product}`
                })

                const passData = productionRealTimes.map(function (productionRealTime) {

                    return productionRealTime.PassedQty
                });

                const notPassData = productionRealTimes.map(function (productionRealTime) {

                    return productionRealTime.NotPassedQty
                });

                var data = {
                    labels: labels,
                    datasets: [
                        {
                            label: 'Passed',
                            data: passData,
                            backgroundColor: Samples.utils.color(1),
                            stack: 'Stack 0',
                        },
                        {
                            label: 'Not Passed',
                            data: notPassData,
                            backgroundColor: Samples.utils.color(2),
                            stack: 'Stack 1',
                        }
                    ]
                };

                var config = {
                    type: 'bar',
                    data: data,
                    options: {
                        plugins: {
                            title: {
                                display: true,
                                text: 'PCQ Realtime Chart'
                            },
                        },
                        responsive: true,
                        interaction: {
                            intersect: false,
                        },
                        scales: {
                            x: {
                                stacked: true,
                            },
                            y: {
                                stacked: true
                            },
                        }
                    }
                };

                const myChart = new Chart(
                    document.getElementById('chart-production-realtime'),
                    config
                );
            });

        })(jQuery);</script>


    <div class="my-4">
        <h2 class="text-center">Activity chart</h2>
        <canvas id="chart-performance-realtime"></canvas>
    </div>


    <script>(function ($) {
            $(document).ready(function () {
                var DATA_COUNT = productionRealTimes.length;
                var labels = productionRealTimes.map(function (data) {
                    return `At: ${data.Hour}:00 - Running product: ${data.Product}`
                })

                const throughputs = productionRealTimes.map(function (productionRealTime) {
                    return productionRealTime.performance.Throughput
                })

                const yields = productionRealTimes.map(function (productionRealTime) {
                    return productionRealTime.performance.Yield
                })

                const data = {
                    labels: labels,
                    datasets: [
                        {
                            label: 'Throughput (%)',
                            data: throughputs,
                            borderColor: Samples.utils.color(4),
                            backgroundColor: Samples.utils.color(4),
                        },
                        {
                            label: 'Yield (%)',
                            data: yields,
                            borderColor: Samples.utils.color(2),
                            backgroundColor: Samples.utils.color(2),
                        }
                    ]
                };

                const config = {
                    type: 'line',
                    data: data,
                    options: {
                        responsive: true,
                        plugins: {
                            legend: {
                                position: 'top',
                            },
                            title: {
                                display: true,
                                text: 'Chart.js Line Chart'
                            }
                        }
                    },
                };

                new Chart(
                    document.getElementById('chart-performance-realtime'),
                    config
                );
            });

        })(jQuery);</script>
</main>
