
@model TLMSData.Models.ProductionInformation

@{
     var Ouput = Newtonsoft.Json.JsonConvert.SerializeObject( Model);  

}


<script>
    console.log(@Html.Raw(Ouput))
</script>
<main>
    <div class="jumbotron pcq-header">
        <h5 class="display-4">PQC production line dashboard</h5>
        <div class="btn-group pcq-head w-40" role="group" aria-label="Basic example">
            <a class="btn bg-green-2" href="#">

                <p>Yeild</p>
                <p>@Model.performance.Yield</p>
            </a>
            <a class="btn bg-blue-2" href="#">
                <p>Throughput</p>
                <p>@Model.performance.Throughput</p>
            </a>
        </div>
    </div>

    <div class="pqc-lines row">
        @{
            foreach(var productionline  in Model.productionLines)
            {
                 <a href="#" class="col-lg-6 col-md-12 pqc-line">
            <div class="card border-0 shadow p-3 mb-5 bg-white roundeds">
                <div class="pqc-line-head">
                    <h3>@productionline.Line</h3>
                </div>
                <div class="pqc-line-model">
                    <p>@productionline.Product</p>
                </div>
                <div class="pqc-line-sumary">
                    <div class="row align-items-center">
                        <div class="col-6">
                            <div style="margin: 20px">
                                <canvas id="myChart2"></canvas>
                            </div>
                        </div>
                        <div class="col-6">
                            <h4 class="d-flex justify-content-between sumary-item">
                                <span>Target</span>
                                <span>@productionline.OPTarget<span class="pqc-unit">Units</span></span>
                            </h4>

                            <h4 class="d-flex justify-content-between sumary-item actual-item">
                                <span>Actual</span>
                                <span>@productionline.Actual<span class="pqc-unit">Units</span></span>
                            </h4>

                            <h4 class="d-flex justify-content-between sumary-item">
                                <span>Open</span>
                                <span>@productionline.OpenQty <span class="pqc-unit">Units</span></span>
                            </h4>

                        </div>
                    </div>
                </div>
                <div class="pqc-line-time-running">
                    <h4 class="d-flex justify-content-between">
                        <span>Production Running</span>
                        <span>@productionline.ProductionRunning.ToString(@"hh\.mm") <span class="hour-unit">H</span></span>
                    </h4>
                </div>

                <div class="pqc-line-quality">
                    <h3>Quality test</h3>
                    <div class="d-flex justify-content-between">
                        <span class="head not-pass-value"></span>
                        <span class="head pass-value">1345</span>
                    </div>
                    <div class="pqc-progress">
                        <div class="pqc-progress-bar">
                            <div class="pqc-progress-bar-fill" style="width: 30%"></div>
                        </div>
                    </div>
                    <div class="d-flex justify-content-between">
                        <span class="tail not-pass-key">Not passed</span>
                        <span class="tail pass-key">Passed</span>
                    </div>
                </div>
            </div>
        </a>
            }
        }


    </div>

    <script>const data = {
            labels: [
                'Red',
                'Blue'
            ],
            datasets: [{
                label: 'My First Dataset',
                data: [40, 60],
                backgroundColor: [
                    'rgb(255, 99, 132)',
                    'rgb(54, 162, 235)'
                ],
                hoverOffset: 4
            }]
        };

        const config = {
            type: 'doughnut',
            data: data,
            options: {
                responsive: true,
                plugins: {
                    legend: {
                        display: false
                    },
                    tooltip: {
                        callbacks: {
                            afterLabel: function (context) {
                                return ['Actual', 'Total'][context.dataIndex]
                            },
                        }
                    }
                }

            },
        };

    const myChart = new Chart(
        document.getElementById('myChart2'),
        config
    );

        const myChart2 = new Chart(
            document.getElementById('myChart3'),
            config
        );
    </script>

    <div>
        <h2 class="text-center">Model chart</h2>
        <canvas id="myChart"></canvas>
    </div>


    <script>(function ($) {
            $(document).ready(function () {
                var DATA_COUNT = 7;
                var NUMBER_CFG = { count: DATA_COUNT, min: -100, max: 100 };
                var labels = Samples.utils.months({ count: 7 });
                var data = {
                    labels: labels,
                    datasets: [
                        {
                            label: 'Dataset 1',
                            data: Samples.utils.numbers(NUMBER_CFG),
                            backgroundColor: Samples.utils.color(1),
                            stack: 'Stack 0',
                        },
                        {
                            label: 'Dataset 2',
                            data: Samples.utils.numbers(NUMBER_CFG),
                            backgroundColor: Samples.utils.color(2),
                            stack: 'Stack 1',
                        },
                        {
                            label: 'Dataset 3',
                            data: Samples.utils.numbers(NUMBER_CFG),
                            backgroundColor: Samples.utils.color(3),
                            stack: 'Stack 2',
                        },
                    ]
                };

                var config = {
                    type: 'bar',
                    data: data,
                    options: {
                        plugins: {
                            title: {
                                display: true,
                                text: 'Chart.js Bar Chart - Stacked'
                            },
                        },
                        responsive: true,
                        interaction: {
                            intersect: false,
                        },
                        scales: {
                            x: {
                                stacked: true,
                            },
                            y: {
                                stacked: true
                            },
                        }
                    }
                };

                const myChart = new Chart(
                    document.getElementById('myChart'),
                    config
                );
            });

        })(jQuery);</script>
</main>
