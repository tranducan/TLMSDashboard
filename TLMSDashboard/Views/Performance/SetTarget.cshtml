@model TLMSData.Models.ProductTarget

@{
}
<div class="container">
    <form class="form-inline" method="post">
        <label for="ProductName" class="mb-2 mr-sm-2">Product:</label>
        <input type="text" class="form-control mb-2 mr-sm-2" id="Product" placeholder="Enter Product" name="ProductName">
        <label for="OutputTarget" class="mb-2 mr-sm-2">Output Target</label>
        <input type="number" class="form-control mb-2 mr-sm-2" id="OutputTarget" placeholder="Enter Target of Output" name="OutputTarget">
        <label for="ReworkTarget" class="mb-2 mr-sm-2">Rework target:</label>
        <input type="number" class="form-control mb-2 mr-sm-2" id="ReworkTarget" placeholder="Enter Target of Rework" name="ReworkTarget">
        <label for="NotGoodTarget" class="mb-2 mr-sm-2">Not Good Target</label>
        <input type="number" class="form-control mb-2 mr-sm-2" id="NotGoodTarget" placeholder="Enter Target of Not Good" name="NotGoodTarget">
        <label for="StartDate" class="mb-2 mr-sm-2">Start Date:</label>
        <input type="datetime" class="form-control mb-2 mr-sm-2" id="StartDate" placeholder="Enter Start Date" name="StartDate">
        <label for="EndDate" class="mb-2 mr-sm-2">End Date:</label>
        <input type="datetime" class="form-control mb-2 mr-sm-2" id="EndDate" placeholder="Enter Start Date" name="EndDate">
        <button type="submit" class="btn btn-primary mb-2">Submit</button>
    </form>
</div>

<div style="margin-top:20px;">
    <button id="table2-new-row-button" class="btn btn-dark">New Row</button>
    <table class="table table-striped table-bordered" id="table2">
        <thead class="thead-dark">
            <tr>
                <th scope="col">#</th>
                <th scope="col">First</th>
                <th scope="col">Last</th>
                <th scope="col">Handle</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <th scope="row">1</th>
                <td>Mark</td>
                <td>Otto</td>
                <td>mdo</td>
            </tr>
            <tr>
                <th scope="row">2</th>
                <td>Jacob</td>
                <td>Thornton</td>
                <td>fat</td>
            </tr>
            <tr>
                <th scope="row">3</th>
                <td>Larry</td>
                <td>the Bird</td>
                <td>twitter</td>
            </tr>
        </tbody>
    </table>
</div>

<script>
    // Example with a add new row button & only some columns editable & removed actions column label
    var example2 = new BSTable("table2", {
        editableColumns: "1,2",
        $addButton: $('#table2-new-row-button'),
        onEdit: function (rowElement) {
            console.log("EDITED:", rowElement);

            let rowAsJQuery = $(rowElement);
            console.log("EDITED (as jquery):", rowAsJQuery);
        },
        advanced: {
            columnLabel: ''
        }
    });
    example2.init();

    function dynamicTableValuesExample() {
			// Generate new values for the table and show how BSTable updates
			let names = ['Matt', 'John', 'Billy', 'Erica', 'Sammy', 'Tom', 'Tate', 'Emily', 'Mike', 'Bob'];
			let numberOfRows = Math.floor(Math.random() * 10);

			document.getElementById("table3-body").innerHTML = '';	// Clear current table
			for(let i = 0; i < numberOfRows; i++) {
				let randomNameIndex = Math.floor(Math.random() * 10);

				let row = document.createElement("tr");
				row.innerHTML = `<th scope="row">` + i + `</th><td>Value</td><td>` + names[randomNameIndex] + `</td><td>twitter</td>`;
				document.getElementById("table3-body").append(row);
			}

			example2.refresh();
		}

</script>
